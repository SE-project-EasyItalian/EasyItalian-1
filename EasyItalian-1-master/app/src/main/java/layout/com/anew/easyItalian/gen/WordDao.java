package layout.com.anew.easyItalian.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import layout.com.anew.easyItalian.recite.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD".
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "WORD";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Word = new Property(1, String.class, "word", false, "word");
        public final static Property Transform = new Property(2, String.class, "transform", false, "transform");
        public final static Property Translation = new Property(3, String.class, "translation", false, "translation");
        public final static Property Example = new Property(4, String.class, "example", false, "example");
        public final static Property AppearTime = new Property(5, Integer.class, "appearTime", false, "appearTime");
        public final static Property CorrectTime = new Property(6, Integer.class, "correctTime", false, "correctTime");
        public final static Property IncorrectTime = new Property(7, Integer.class, "incorrectTime", false, "incorrectTime");
        public final static Property EFactor = new Property(8, Double.class, "EFactor", false, "EFactor");
        public final static Property Interval = new Property(9, Integer.class, "interval", false, "interval");
        public final static Property NextAppearTime = new Property(10, Integer.class, "nextAppearTime", false, "nextAppearTime");
        public final static Property Grasp = new Property(11, Boolean.class, "grasp", false, "grasp");
    }


    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"word\" TEXT," + // 1: word
                "\"transform\" TEXT," + // 2: transform
                "\"translation\" TEXT," + // 3: translation
                "\"example\" TEXT," + // 4: example
                "\"appearTime\" INTEGER," + // 5: appearTime
                "\"correctTime\" INTEGER," + // 6: correctTime
                "\"incorrectTime\" INTEGER," + // 7: incorrectTime
                "\"EFactor\" REAL," + // 8: EFactor
                "\"interval\" INTEGER," + // 9: interval
                "\"nextAppearTime\" INTEGER," + // 10: nextAppearTime
                "\"grasp\" INTEGER);"); // 11: grasp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(2, word);
        }
 
        String transform = entity.getTransform();
        if (transform != null) {
            stmt.bindString(3, transform);
        }
 
        String translation = entity.getTranslation();
        if (translation != null) {
            stmt.bindString(4, translation);
        }
 
        String example = entity.getExample();
        if (example != null) {
            stmt.bindString(5, example);
        }
 
        Integer appearTime = entity.getAppearTime();
        if (appearTime != null) {
            stmt.bindLong(6, appearTime);
        }
 
        Integer correctTime = entity.getCorrectTime();
        if (correctTime != null) {
            stmt.bindLong(7, correctTime);
        }
 
        Integer incorrectTime = entity.getIncorrectTime();
        if (incorrectTime != null) {
            stmt.bindLong(8, incorrectTime);
        }
 
        Double EFactor = entity.getEFactor();
        if (EFactor != null) {
            stmt.bindDouble(9, EFactor);
        }
 
        Integer interval = entity.getInterval();
        if (interval != null) {
            stmt.bindLong(10, interval);
        }
 
        Integer nextAppearTime = entity.getNextAppearTime();
        if (nextAppearTime != null) {
            stmt.bindLong(11, nextAppearTime);
        }
 
        Boolean grasp = entity.getGrasp();
        if (grasp != null) {
            stmt.bindLong(12, grasp ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(2, word);
        }
 
        String transform = entity.getTransform();
        if (transform != null) {
            stmt.bindString(3, transform);
        }
 
        String translation = entity.getTranslation();
        if (translation != null) {
            stmt.bindString(4, translation);
        }
 
        String example = entity.getExample();
        if (example != null) {
            stmt.bindString(5, example);
        }
 
        Integer appearTime = entity.getAppearTime();
        if (appearTime != null) {
            stmt.bindLong(6, appearTime);
        }
 
        Integer correctTime = entity.getCorrectTime();
        if (correctTime != null) {
            stmt.bindLong(7, correctTime);
        }
 
        Integer incorrectTime = entity.getIncorrectTime();
        if (incorrectTime != null) {
            stmt.bindLong(8, incorrectTime);
        }
 
        Double EFactor = entity.getEFactor();
        if (EFactor != null) {
            stmt.bindDouble(9, EFactor);
        }
 
        Integer interval = entity.getInterval();
        if (interval != null) {
            stmt.bindLong(10, interval);
        }
 
        Integer nextAppearTime = entity.getNextAppearTime();
        if (nextAppearTime != null) {
            stmt.bindLong(11, nextAppearTime);
        }
 
        Boolean grasp = entity.getGrasp();
        if (grasp != null) {
            stmt.bindLong(12, grasp ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // word
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // transform
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // translation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // example
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // appearTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // correctTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // incorrectTime
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // EFactor
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // interval
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // nextAppearTime
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // grasp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTransform(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTranslation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExample(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppearTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCorrectTime(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIncorrectTime(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEFactor(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setInterval(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setNextAppearTime(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setGrasp(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Word entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
