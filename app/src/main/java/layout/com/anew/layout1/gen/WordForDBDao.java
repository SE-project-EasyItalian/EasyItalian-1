package layout.com.anew.layout1.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import layout.com.anew.layout1.WordForDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD_FOR_DB".
*/
public class WordForDBDao extends AbstractDao<WordForDB, Long> {

    public static final String TABLENAME = "WORD_FOR_DB";

    /**
     * Properties of entity WordForDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Word = new Property(1, String.class, "word", false, "word");
        public final static Property Pos = new Property(2, String.class, "pos", false, "pos");
        public final static Property Tran = new Property(3, String.class, "tran", false, "tran");
        public final static Property Trans = new Property(4, String.class, "trans", false, "trans");
        public final static Property Example = new Property(5, String.class, "example", false, "example");
        public final static Property AppearTime = new Property(6, Integer.class, "appearTime", false, "appearTime");
        public final static Property CorrectTime = new Property(7, Integer.class, "correctTime", false, "correctTime");
        public final static Property IncorrectTime = new Property(8, Integer.class, "incorrectTime", false, "incorrectTime");
    }


    public WordForDBDao(DaoConfig config) {
        super(config);
    }
    
    public WordForDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD_FOR_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"word\" TEXT," + // 1: word
                "\"pos\" TEXT," + // 2: pos
                "\"tran\" TEXT," + // 3: tran
                "\"trans\" TEXT," + // 4: trans
                "\"example\" TEXT," + // 5: example
                "\"appearTime\" INTEGER," + // 6: appearTime
                "\"correctTime\" INTEGER," + // 7: correctTime
                "\"incorrectTime\" INTEGER);"); // 8: incorrectTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD_FOR_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WordForDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(2, word);
        }
 
        String pos = entity.getPos();
        if (pos != null) {
            stmt.bindString(3, pos);
        }
 
        String tran = entity.getTran();
        if (tran != null) {
            stmt.bindString(4, tran);
        }
 
        String trans = entity.getTrans();
        if (trans != null) {
            stmt.bindString(5, trans);
        }
 
        String example = entity.getExample();
        if (example != null) {
            stmt.bindString(6, example);
        }
 
        Integer appearTime = entity.getAppearTime();
        if (appearTime != null) {
            stmt.bindLong(7, appearTime);
        }
 
        Integer correctTime = entity.getCorrectTime();
        if (correctTime != null) {
            stmt.bindLong(8, correctTime);
        }
 
        Integer incorrectTime = entity.getIncorrectTime();
        if (incorrectTime != null) {
            stmt.bindLong(9, incorrectTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WordForDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(2, word);
        }
 
        String pos = entity.getPos();
        if (pos != null) {
            stmt.bindString(3, pos);
        }
 
        String tran = entity.getTran();
        if (tran != null) {
            stmt.bindString(4, tran);
        }
 
        String trans = entity.getTrans();
        if (trans != null) {
            stmt.bindString(5, trans);
        }
 
        String example = entity.getExample();
        if (example != null) {
            stmt.bindString(6, example);
        }
 
        Integer appearTime = entity.getAppearTime();
        if (appearTime != null) {
            stmt.bindLong(7, appearTime);
        }
 
        Integer correctTime = entity.getCorrectTime();
        if (correctTime != null) {
            stmt.bindLong(8, correctTime);
        }
 
        Integer incorrectTime = entity.getIncorrectTime();
        if (incorrectTime != null) {
            stmt.bindLong(9, incorrectTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WordForDB readEntity(Cursor cursor, int offset) {
        WordForDB entity = new WordForDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // word
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pos
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tran
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // trans
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // example
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // appearTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // correctTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // incorrectTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WordForDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPos(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTran(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTrans(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExample(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAppearTime(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCorrectTime(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIncorrectTime(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WordForDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WordForDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WordForDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
